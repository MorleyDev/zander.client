package uk.co.morleydev.zander.client

import java.io.File

import uk.co.morleydev.zander.client.model.{Configuration, Arguments}
import uk.co.morleydev.zander.client.model.arg.BuildCompiler._
import uk.co.morleydev.zander.client.model.arg.BuildMode._
import uk.co.morleydev.zander.client.model.arg.{Branch, Project}
import uk.co.morleydev.zander.client.model.net.ProjectDto
import uk.co.morleydev.zander.client.model.store.{CacheDetails, ArtefactDetails, SourceVersion}

import scala.concurrent.Future

package object data {
  /**
   * Parse a set of arguments and returned the parsed arguments
   */
  type ArgumentParser = (IndexedSeq[String] => Arguments)

  /**
   * Parse a set of arguments, and return either the parsed arguments or an error code
   */
  type ArgumentParserWithErrorCodes = (IndexedSeq[String] => Either[Int, Arguments])

  /**
   * Maps build modes to build types for a build strategy (i.e BuildMode.Debug -> cmake Debug flag)
   */
  type BuildModeBuildTypeMap = (BuildMode => String)

  /**
   * The project source build is responsible for the compilation of the project files using the makefiles
   * generated by a source prebuild
   */
  type BuildProjectSource = ((Project, BuildCompiler, BuildMode) => Unit)

  /**
   * Check if the artefact details exist for the specified Project, Compiler and Mode
   */
  type CheckArtefactDetailsExist = ((Project, BuildCompiler, BuildMode) => Boolean)

  /**
   * Get the Generator flags to use for the specified compiler
   */
  type CompilerGeneratorMap = (BuildCompiler => Seq[String])

  /**
   * Delete the artefact details for a project
   */
  type DeleteProjectArtefactDetails = ((Project, BuildCompiler, BuildMode) => Unit)

  /**
   * Delete the artefacts for a project
   */
  type DeleteProjectArtefacts = (Seq[String] => Unit)

  /**
   * Acquire the source for a given project, using information from the ProjectDto
   */
  type DownloadProjectSource = ((Project, ProjectDto) => Unit)

  /**
   * Checkout a branch in the source for a given project
   */
  type CheckoutProjectSource = ((Project, Branch) => Unit)
  /**
   * Get the ProjectDto for the Project for a given Compiler
   */
  type GetProjectDto = ((Project, BuildCompiler) => Future[ProjectDto])

  /**
   * Get the project source version currently available for a given project
   */
  type GetProjectSourceVersion = (Project => SourceVersion)

  /**
   * The project artefact install is responsible for the installation of artefacts from a store (i.e the project cache)
   * to the local working directory
   */
  type InstallProjectArtefact = ((Project, BuildCompiler, BuildMode, Branch) => Unit)

  /**
   * The project source install is responsible for the installation of project files created by the build to the cache
   */
  type InstallProjectCache = ((Project, BuildCompiler, BuildMode) => Unit)

  /**
   * List the cache filenames for a project
   */
  type ListProjectCacheFiles = ((Project, BuildCompiler, BuildMode) => Seq[String])

  /**
   * Load a configuration file, creating it if the configuration cannot be found
   */
  type LoadOrCreateConfiguration = (String => Configuration)

  /**
   * Run the prebuild steps (e.g cmake)
   */
  type PreBuildProjectSource = ((Project, BuildCompiler, BuildMode, Branch) => Unit)

  /**
   * Process a map of projects to artefact details (e.g remove duplicate files from the Artefact Details)
   */
  type ProcessProjectArtefactDetailsMap = (Map[(Project, BuildCompiler, BuildMode), ArtefactDetails] => Map[(Project, BuildCompiler, BuildMode), ArtefactDetails])

  /**
   * Read the artefact details for a given project, compiler, mode combination
   */
  type ReadProjectArtefactDetails = ((Project, BuildCompiler, BuildMode) => ArtefactDetails)

  /**
   * Read the cache details for a given project, compiler, mode combination
   */
  type ReadProjectCacheDetails = ((Project, BuildCompiler, BuildMode, Branch) => CacheDetails)

  /**
   * Split a filename into a project, compiler and build mode ( e.g project.compiler.buildmode.json => (Project, Compiler, BuildMode) )
   */
  type SplitFileNameToProjectDetails = (String => (Project, BuildCompiler, BuildMode))

  /**
   * Update the cached project source
   */
  type UpdateProjectSource = ((Project, ProjectDto) => Unit)


  /**
   * Write a file containing the project artefact details for a project, with a compiler, build mode, source version and set of filenames
   */
  type WriteProjectArtefactDetails = ((Project, BuildCompiler, BuildMode, SourceVersion, Seq[String]) => Unit)

  /**
   * Write project source details for a project, with a compiler, build mode and source version
   */
  type WriteProjectSourceDetails = ((Project, BuildCompiler, BuildMode, Branch, SourceVersion) => Unit)


  /**
   * Factory used for building a native process to run, for example running CMake or Git
   */
  type NativeProcessBuilderFactory = (Seq[String] => NativeProcessBuilder)

  /**
   * Gets the path to write/read for a project artefacts in the cache
   */
  type GetArtefactsLocation = ((Project, BuildCompiler, BuildMode, Branch) => File)

  /**
   * Gets the path to write/read for a project source in the cache
   */
  type GetSourceLocation = (Project => File)
}
